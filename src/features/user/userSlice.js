import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { authKey, loginRequest, signupRequest } from "./userAPI";

const initialState = {
  loggedIn: false,
  username: "",
  userId: "",
  public_key: "",
  authStatus: false,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  "user/login",
  async ({ username, password }) => {
    const res = await loginRequest(username, password);
    return { loggedIn: true, username, userId: res.id };
  }
);

export const signupAsync = createAsyncThunk(
  "user/signup",
  async ({ public_key, username, password }) => {
    const res = await signupRequest(public_key, username, password);
    return { loggedIn: true, username, userId: res.id };
  }
);

export const authAsync = createAsyncThunk("user/auth", async () => {
  const res = await authKey();
  return { public_key: res.address };
});

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.loggedIn = false;
      state.username = "";
      state.userId = "";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = "idle";
        console.log(action.payload);
        state.loggedIn = action.payload.loggedIn;
        state.username = action.payload.username;
        state.userId = action.payload.userId;
      })
      .addCase(signupAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(signupAsync.fulfilled, (state, action) => {
        state.status = "idle";
        console.log(action.payload);
        state.loggedIn = action.payload.loggedIn;
        state.username = action.payload.username;
        state.userId = action.payload.userId;
      })
      .addCase(authAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(authAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.authStatus = true;
        state.public_key = action.payload.public_key;
      });
  },
});

export const { logout } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`
export const selectUser = (state) => state.user;

export default userSlice.reducer;
